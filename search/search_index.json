{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ShopWIKI \u2014 CNC Manufacturing Knowledge Base","text":"<p>Welcome to the internal knowledge base for our aerospace CNC operations. This wiki contains setup instructions, Git workflows, system guides, and job-specific work instructions \u2014 all version-controlled and regularly updated.</p>"},{"location":"#guides","title":"\ud83d\udcd8 Guides","text":""},{"location":"#general","title":"\ud83d\udd27 General","text":"<ul> <li>Restoring an iPad</li> </ul>"},{"location":"#git","title":"\ud83d\udcbb Git","text":"<ul> <li>MkDocs Setup &amp; Deployment \u2014 Full Workflow</li> <li>Using Git in a CNC Environment</li> <li>Why Git Is a Strategic Fit for Aerospace CNC Shops</li> </ul>"},{"location":"#work-instructions","title":"\ud83d\udcc2 Work Instructions","text":""},{"location":"#machine-261","title":"Machine 261","text":"<ul> <li>1656952-1 Work Instruction</li> </ul> <p>(Additional parts will be listed here as they\u2019re added.)</p>"},{"location":"#_1","title":"ShopWIKI \u2014 CNC Manufacturing Knowledge Base","text":""},{"location":"#notes","title":"\ud83e\uddea Notes","text":"<ul> <li>This is a test wiki site used for demonstration and internal development purposes only.</li> <li> <p>It contains no ITAR-regulated, proprietary, or intellectual property data.</p> </li> <li> <p>Updates should be committed via Git following our internal revision control policy.</p> </li> </ul>"},{"location":"Guides/GD%26T/GD%26T/","title":"GD&T","text":"<p>Geometric Dimensioning and Tolerancing (GD&amp;T) Fundamentals Training Document Table of Contents Introduction to GD&amp;T Why Use GD&amp;T? Basic Concepts and Terminology Datum Reference Framework Form Controls Orientation Controls Location Controls Runout Controls Profile Controls Material Condition Modifiers Feature Control Frames Common Applications Best Practices Practical Examples Introduction to GD&amp;T Geometric Dimensioning and Tolerancing (GD&amp;T) is a symbolic language used on engineering drawings to communicate design intent, manufacturing requirements, and inspection criteria. It provides a precise method for describing the geometry of parts and assemblies, going beyond traditional plus/minus tolerancing to control form, orientation, location, and runout of features.</p> <p>GD&amp;T is standardized internationally through ASME Y14.5 (American) and ISO 1101 (International) standards, ensuring consistent interpretation across different organizations and countries.</p> <p>Why Use GD&amp;T? Traditional coordinate tolerancing has limitations that GD&amp;T addresses:</p> <p>Limitations of Traditional Tolerancing:</p> <p>Assumes perfect form at maximum material condition Can be overly restrictive or inadequately controlled Difficulty communicating functional requirements Potential for misinterpretation Benefits of GD&amp;T:</p> <p>Functional Design: Controls relate directly to how parts function in assemblies Manufacturing Efficiency: Allows for optimized manufacturing processes Quality Control: Provides clear inspection criteria Cost Reduction: Eliminates unnecessary precision while maintaining function International Communication: Standardized symbols reduce language barriers Design Intent: Clearly communicates what is critical vs. what is not Basic Concepts and Terminology Key Terms Feature: Any physical portion of a part (surfaces, holes, slots, etc.)</p> <p>Feature of Size: A cylindrical or spherical surface, or a set of two opposed parallel surfaces, each of which is associated with a size dimension</p> <p>Datum: A theoretically exact point, line, or plane derived from the datum feature</p> <p>Datum Feature: An actual feature of the part used to establish a datum</p> <p>Tolerance Zone: The zone within which a feature must lie</p> <p>Virtual Condition: The boundary generated by the collective effects of size and geometric tolerances</p> <p>The 14 GD&amp;T Symbols GD&amp;T uses 14 primary geometric characteristic symbols, organized into five categories:</p> <p>Form Controls (Shape of Individual Features):</p> <p>\u23e4 Straightness \u25cb Flatness \u25cb Circularity (Roundness) \u232d Cylindricity Orientation Controls (Relative to Datums):</p> <p>\u27c2 Perpendicularity \u2220 Angularity \u2225 Parallelism Location Controls (Position Relative to Datums):</p> <p>\u2295 Position \u2316 Concentricity \u2261 Symmetry Runout Controls (Composite of Form, Orientation, and Location):</p> <p>\u2197 Circular Runout \u2197\u2197 Total Runout Profile Controls (Complex Surfaces and Boundaries):</p> <p>\u2312 Profile of a Line \u2313 Profile of a Surface Datum Reference Framework The datum reference framework establishes the coordinate system for geometric controls. It consists of three mutually perpendicular planes that simulate the part's functional relationship in its assembly.</p> <p>Datum Precedence: Primary Datum (First): Contacts at least 3 points, constrains 3 degrees of freedom Secondary Datum (Second): Contacts at least 2 points, constrains 2 additional degrees of freedom Tertiary Datum (Third): Contacts at least 1 point, constrains the final degree of freedom Datum Selection Guidelines Choose datums that represent functional surfaces Primary datum should be the most important functional surface Datums should be easily accessible for manufacturing and inspection Consider stability (larger, more stable surfaces preferred) Maintain consistency throughout the drawing Form Controls Form controls specify the shape characteristics of individual features without reference to other features or datums.</p> <p>Straightness (\u23e4) Controls how much a line element or axis can deviate from a perfect straight line.</p> <p>Surface Straightness: Applied to line elements on a surface Axis Straightness: Applied to the axis of cylindrical features Flatness (\u25cb) Controls how much a surface can deviate from a perfect plane. All points on the surface must lie between two parallel planes separated by the tolerance value.</p> <p>Circularity/Roundness (\u25cb) Controls the roundness of circular features in cross-section. Each circular element must lie between two concentric circles separated by the tolerance value.</p> <p>Cylindricity (\u232d) Controls the form of an entire cylindrical surface. The entire surface must lie between two concentric cylinders separated by the tolerance value.</p> <p>Orientation Controls Orientation controls specify the orientation of features relative to datums but do not control location.</p> <p>Perpendicularity (\u27c2) Controls how perpendicular a feature is to a datum. The tolerance zone is the area between two parallel planes, lines, or surfaces perpendicular to the datum.</p> <p>Parallelism (\u2225) Controls how parallel a feature is to a datum. The tolerance zone is the area between two parallel planes, lines, or surfaces parallel to the datum.</p> <p>Angularity (\u2220) Controls the angle of a feature relative to a datum at any specified angle other than 90\u00b0 or 0\u00b0.</p> <p>Location Controls Location controls specify the location of features relative to datums and may also control orientation and form.</p> <p>Position (\u2295) The most commonly used GD&amp;T control. Defines a tolerance zone within which the center, axis, or center plane of a feature must lie. Position tolerance creates a cylindrical tolerance zone for round features and a parallel-sided zone for other features.</p> <p>Key Benefits:</p> <p>Functional relationship to mating parts Bonus tolerance available with material condition modifiers Clear inspection methods Concentricity (\u2316) Controls the coaxial relationship of two or more cylindrical features. The axis of the toleranced feature must lie within a cylindrical tolerance zone whose axis coincides with the datum axis.</p> <p>Symmetry (\u2261) Controls the symmetrical relationship of features across a center plane. The center plane of the toleranced feature must lie between two parallel planes separated by the tolerance value and symmetrically disposed about the datum center plane.</p> <p>Runout Controls Runout controls are composite controls that simultaneously control form, orientation, and location relative to a datum axis.</p> <p>Circular Runout (\u2197) Controls circular elements of a surface independently. Each circular element is measured separately as the part is rotated about the datum axis.</p> <p>Total Runout (\u2197\u2197) Controls the entire surface simultaneously. The entire surface is evaluated as the part is rotated about the datum axis, providing control over form, orientation, and location.</p> <p>Profile Controls Profile controls specify the tolerance zone for complex surfaces and can control form, orientation, location, and size.</p> <p>Profile of a Line (\u2312) Controls the form of individual line elements across a surface. Each line element must lie between two parallel boundaries separated by the tolerance value.</p> <p>Profile of a Surface (\u2313) Controls the form of an entire surface. The entire surface must lie between two parallel boundaries separated by the tolerance value.</p> <p>Material Condition Modifiers Material condition modifiers specify the condition of a feature when a geometric tolerance applies.</p> <p>Maximum Material Condition (MMC) \u24c2 The condition where a feature contains the maximum amount of material:</p> <p>External features: Maximum size Internal features: Minimum size Benefits:</p> <p>Bonus tolerance available Allows for functional gaging Optimizes manufacturing efficiency Least Material Condition (LMC) \u24c1 The condition where a feature contains the least amount of material:</p> <p>External features: Minimum size Internal features: Maximum size Regardless of Feature Size (RFS) The default condition where geometric tolerance applies regardless of the feature's actual size. No additional tolerance is gained or lost based on size.</p> <p>Feature Control Frames Feature control frames contain all the information needed to specify a geometric tolerance:</p> <p>Structure (left to right):</p> <p>Geometric characteristic symbol Tolerance value and modifier (if applicable) Primary datum reference and modifier (if applicable) Secondary datum reference and modifier (if applicable) Tertiary datum reference and modifier (if applicable) Example Frame Components:</p> <p>|\u2295|\u00d80.5|\u24c2|A|\u24c2|B|\u24c2|C| Position tolerance \u00d80.5 tolerance at MMC Referenced to datums A, B, C at MMC Common Applications Hole Patterns Position tolerance is ideal for controlling bolt hole patterns, ensuring proper assembly with mating parts while allowing manufacturing flexibility.</p> <p>Shaft and Bore Assemblies Runout controls ensure smooth rotation and proper fit between rotating components.</p> <p>Machined Surfaces Flatness and straightness controls ensure proper seating and contact between mating surfaces.</p> <p>Complex Contours Profile controls accommodate complex curved surfaces found in aerospace, automotive, and consumer products.</p> <p>Best Practices Drawing Practices Minimize the number of datums - Use only what's necessary for function Be consistent - Use the same datum references for related features Consider inspection - Ensure tolerances can be reasonably measured Start with function - Base tolerances on how the part will be used Use appropriate controls - Don't over-constrain non-critical features Tolerance Selection Consider manufacturing processes - Match tolerances to process capabilities Account for assembly requirements - Ensure proper fit and function Balance cost and function - Tighter tolerances increase cost Use material condition modifiers - Take advantage of bonus tolerance when appropriate Common Mistakes to Avoid Over-tolerancing non-functional features Mixing coordinate and geometric tolerancing inappropriately Not considering inspection methods during design Ignoring material condition effects Poor datum selection and hierarchy Practical Examples Example 1: Simple Bracket A mounting bracket requires:</p> <p>Flat mounting surface (Primary datum A) Two perpendicular surfaces for location (Secondary datum B, Tertiary datum C) Hole pattern positioned relative to the datums Application:</p> <p>Flatness control on mounting surface Position tolerance on hole pattern referenced to A|B|C MMC modifier for bonus tolerance Example 2: Rotating Shaft A shaft assembly requires:</p> <p>Concentricity between bearing journals Perpendicularity of shoulder to shaft axis Circular runout for bearing surfaces Application:</p> <p>Primary datum established by main bearing journal Concentricity control for secondary journal Perpendicularity for shoulder surface Circular runout for finished bearing surfaces Example 3: Complex Housing A pump housing with multiple features:</p> <p>Critical sealing surfaces Bolt hole patterns at different elevations Internal passages with position requirements Application:</p> <p>Profile tolerance for sealing surfaces Position tolerance for bolt patterns Composite position tolerance for passage alignment Multiple datum reference frames as needed Summary GD&amp;T provides a powerful and precise method for communicating design intent on engineering drawings. By understanding and properly applying these fundamentals, engineers can create designs that are functional, manufacturable, and inspectable while optimizing cost and quality.</p> <p>The key to successful GD&amp;T implementation is understanding that geometric tolerances should reflect the functional requirements of the design. Start with how the part will be used, consider manufacturing and inspection capabilities, and apply the appropriate controls to ensure the part will perform its intended function.</p> <p>Remember that GD&amp;T is a language - like any language, proficiency comes with study, practice, and experience. Continue to reference current standards (ASME Y14.5 or ISO 1101) for detailed requirements and stay current with evolving practices in the field.</p> <p>This document provides fundamental training in GD&amp;T concepts. For detailed implementation and advanced applications, consult current ASME Y14.5 or ISO 1101 standards and consider additional specialized training.</p> <p>Made with</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/","title":"Git For Managers","text":"<p>Git for Managers Who Don\u2019t Know What Git Is</p> <p>Version 1.0 | Written for engineering, IT, and operations leads who need clarity, not code.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#what-is-git","title":"\ud83d\udd0d What Is Git?","text":"<p>Git is a version control system used by developers, engineers, and IT teams to track changes to files, collaborate on work, and manage complex projects over time.</p> <p>Think of it as \"Track Changes\" in Word \u2014 but for everything.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#why-does-git-matter-why","title":"\u2699\ufe0f Why Does Git Matter? why!!!!","text":"<ul> <li>Traceability: Know exactly who changed what, when, and why</li> <li>Rollback: Revert bad changes instantly</li> <li>Collaboration: Multiple people can work on the same files without overwriting each other</li> <li>Backups: Every version of every file is safely stored</li> </ul>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#why-email-based-change-tracking-falls-short","title":"\u274c Why Email-Based Change Tracking Falls Short:","text":"<p>Many companies still track changes through email chains \u2014 for example, \"Please update this program,\" or \"See attached revised drawing.\" This is risky because:</p> <ul> <li>Emails get lost or buried in inboxes</li> <li>Attachments are overwritten or versioned manually (\"Final_Final_Rev3.2.xlsx\")</li> <li>There's no audit trail or easy way to see what changed and why</li> <li>Updates depend on human memory and inbox discipline</li> </ul> <p>With Git, everything is tracked in a secure, centralized way with full version history, comments, and authorship \u2014 no digging through email threads.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#what-does-git-look-like-in-practice","title":"\ud83d\udcca What Does Git Look Like in Practice?","text":"<p>When a file is updated in Git, the system automatically creates a history log, like this:</p> <pre><code>commit 2f4a1bc - Updated feed rate per shift B feedback\nAuthor: J. Smith &lt;jsmith@company.com&gt;\nDate:   2024-05-21\n\ncommit 7d2e8fa - Initial CNC program load\nAuthor: B. Foster &lt;bfoster@company.com&gt;\nDate:   2024-05-20\n</code></pre> <p>You can also see what exactly changed between two versions:</p> <pre><code>- G1 X2.000 Y1.500 F50.0\n+ G1 X2.000 Y1.500 F75.0  // Adjusted feed rate for material change\n</code></pre> <p>This means there's never any guessing \u2014 you know exactly who made the change, when, and why.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#what-is-the-gpl-and-is-git-really-free","title":"\ud83d\udce6 What Is the GPL, and Is Git Really Free?","text":"<p>Yes, Git is 100% free. It is licensed under the GNU General Public License (GPL), which guarantees that:</p> <ul> <li>Anyone can use it</li> <li>Anyone can view and modify the source code</li> <li>Nobody can make it proprietary and lock you out of it</li> </ul> <p>There are no hidden fees, subscriptions, or catch.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#who-uses-git","title":"\ud83c\udfdb\ufe0f Who Uses Git?","text":"<p>Git is used by:</p> <ul> <li>NASA (Mars Helicopter software was tracked with Git)</li> <li>Google, Microsoft, Apple, Meta, Amazon</li> <li>Automotive, Aerospace, Defense, and Energy industries</li> <li>Eaton vendors and partners (very likely)</li> </ul> <p>It\u2019s the industry standard \u2014 like spreadsheets are for accounting.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#examples-in-manufacturing-engineering","title":"\ud83c\udf93 Examples in Manufacturing &amp; Engineering","text":"<ul> <li>CNC programs are version-controlled to avoid re-running bad code</li> <li>Tool lists, setup sheets, and process docs can be tracked and shared</li> <li>Drawings and inspection sheets are updated with full revision history</li> <li>Operators, engineers, and programmers all speak the same language</li> </ul>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#git-vs-email-a-quick-comparison","title":"\ud83e\udde9 Git vs. Email: A Quick Comparison","text":"Task With Email With Git Find last version Search inbox or ask around <code>git log</code> or visual history See what's changed Manually compare files Built-in <code>git diff</code> Know who made changes Hope it's in the email Always tracked in commit metadata Revert a mistake Dig up old attachment (maybe) <code>git revert</code> Team collaboration Risk overwriting changes Safe parallel work via branches"},{"location":"Guides/GIT/Setup/Git_For_Managers/#git-can-be-visual-too","title":"\ud83d\uddbc\ufe0f Git Can Be Visual, Too","text":"<p>You don\u2019t have to use the command line to benefit from Git. Tools like GitHub Desktop, GitKraken, or TortoiseGit give you a friendly visual interface with point-and-click control:</p> <ul> <li>View project history as a timeline</li> <li>Compare versions side-by-side</li> <li>Approve or reject changes like a modern inbox</li> </ul> <p>\u201cGit\u201d doesn\u2019t mean green text on a black screen \u2014 it can look just like Outlook, Excel, or any modern app.</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#how-to-get-started-with-git-at-your-site","title":"\ud83d\ude80 How to Get Started with Git at Your Site","text":"<ol> <li>Pick a simple use case \u2014 like setup sheets or CNC programs</li> <li>Choose a Git GUI \u2014 GitHub Desktop, GitKraken, or TortoiseGit</li> <li>Create a shared repository \u2014 on a server or even a synced folder</li> <li>Train one or two \u201cGit champions\u201d \u2014 not everyone needs to know it</li> <li>Scale as needed \u2014 start small, then expand to other files</li> </ol>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#real-world-impact","title":"\ud83d\udcc8 Real-World Impact","text":"<p>After tracking CNC programs in Git, one team reported:</p> <p>\u201cWe reduced errors caused by outdated files by over 80% in one month. It paid for itself in less than a week.\u201d</p>"},{"location":"Guides/GIT/Setup/Git_For_Managers/#bottom-line","title":"\u2705 Bottom Line","text":"<p>Just because something hasn't been used before in your shop doesn't mean it lacks value. New tools like Git can dramatically improve how teams manage change, especially in high-stakes environments like aerospace. Sometimes, the most impactful improvements come from outside the usual way of doing things \u2014 even if they haven't been part of the workflow in the past.</p> <ul> <li>Git helps you save time, prevent mistakes, and ensure traceability</li> <li>It\u2019s free, open-source, and globally trusted</li> <li>You don\u2019t need to be a programmer to benefit from it</li> </ul> <p>Even if you never type <code>git</code> in a terminal, your company runs smoother when someone else does.</p> <p>Want to implement Git at your site? You might have to be the one to lead the charge \u2014 many teams, especially in traditional manufacturing environments, haven\u2019t adopted it yet and may not even be familiar with basic concepts like what a text file is.</p> <p>If your team isn\u2019t highly technical, don\u2019t worry \u2014 Git can be integrated into simple, user-friendly workflows with easy-to-use tools and visual interfaces. With the right setup, operators and staff never even need to know they\u2019re using Git \u2014 it just works in the background to keep everything organized, backed up, and versioned.*</p>"},{"location":"Guides/GIT/Setup/Local%20Setup/","title":"Local Setup","text":""},{"location":"Guides/GIT/Setup/Local%20Setup/#how-to-set-up-a-self-hosted-mkdocs-wiki-with-git-integration","title":"How to Set Up a Self-Hosted MkDocs Wiki with Git Integration","text":"<p>Author: Brian F. Date: 2025-05-30 Purpose: Provide a repeatable guide to deploy and manage a self-hosted MkDocs-based wiki site using Git for version control.</p>"},{"location":"Guides/GIT/Setup/Local%20Setup/#overview-test","title":"Overview test","text":"<p>This guide describes how to:</p> <ul> <li>Host an internal documentation wiki using MkDocs</li> <li>Version-control all content using Git</li> <li>Serve the static site over your internal network</li> <li>Automatically rebuild and deploy the site after Git pushes</li> </ul> <p>This setup is intended for internal-only use and contains no ITAR or proprietary data.</p>"},{"location":"Guides/GIT/Setup/Local%20Setup/#requirements","title":"Requirements","text":""},{"location":"Guides/GIT/Setup/Local%20Setup/#server","title":"Server","text":"<ul> <li>Linux server (e.g., Ubuntu or Rocky Linux)</li> <li>SSH access</li> <li>Python 3.8+</li> <li>nginx or Apache for static file hosting</li> </ul>"},{"location":"Guides/GIT/Setup/Local%20Setup/#software","title":"Software","text":"<ul> <li>MkDocs: static site generator</li> <li>Git: version control</li> </ul>"},{"location":"Guides/GIT/Setup/Local%20Setup/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"Guides/GIT/Setup/Local%20Setup/#1-create-a-git-repository-bare","title":"1. Create a Git Repository (Bare)","text":"<p>On the server:</p> <pre><code>mkdir -p /srv/git/wiki.git\ncd /srv/git/wiki.git\ngit init --bare\n</code></pre>"},{"location":"Guides/GIT/Setup/Local%20Setup/#2-create-a-working-directory","title":"2. Create a Working Directory","text":"<p>This is where the MkDocs build will happen:</p> <pre><code>mkdir -p /srv/wiki-working\ncd /srv/wiki-working\ngit clone /srv/git/wiki.git .\n</code></pre>"},{"location":"Guides/GIT/Setup/Local%20Setup/#3-set-up-mkdocs","title":"3. Set Up MkDocs","text":"<p>Still inside <code>/srv/wiki-working</code>:</p> <pre><code>pip install mkdocs mkdocs-material\nmkdocs new .\n</code></pre> <p>Customize your <code>mkdocs.yml</code> and add documentation to the <code>docs/</code> folder.</p>"},{"location":"Guides/GIT/Setup/Local%20Setup/#4-create-a-git-hook-to-auto-build","title":"4. Create a Git Hook to Auto-Build","text":"<p>In <code>/srv/git/wiki.git/hooks/post-receive</code>:</p> <pre><code>#!/bin/bash\nGIT_WORK_TREE=/srv/wiki-working GIT_DIR=/srv/git/wiki.git git checkout -f\ncd /srv/wiki-working\nmkdocs build --clean\ncp -r site/* /var/www/html/wiki\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x /srv/git/wiki.git/hooks/post-receive\n</code></pre>"},{"location":"Guides/GIT/Setup/Local%20Setup/#5-configure-web-server-eg-nginx","title":"5. Configure Web Server (e.g., nginx)","text":"<p>Example nginx block:</p> <pre><code>server {\n    listen 80;\n    server_name wiki.mycompany.local;\n    root /var/www/html/wiki;\n    index index.html;\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>Reload nginx:</p> <pre><code>sudo systemctl reload nginx\n</code></pre>"},{"location":"Guides/GIT/Setup/Local%20Setup/#6-push-changes-from-your-workstation","title":"6. Push Changes from Your Workstation","text":"<p>From your local copy:</p> <pre><code>git remote add origin ssh://wiki-server:/srv/git/wiki.git\ngit push -u origin main\n</code></pre> <p>This triggers the <code>post-receive</code> hook and updates the site.</p>"},{"location":"Guides/GIT/Setup/Local%20Setup/#usage-notes","title":"Usage Notes","text":"<ul> <li>Edit <code>.md</code> files locally using Zettlr or VS Code</li> <li>Use <code>mkdocs serve</code> for live preview</li> <li>Commit and push changes to deploy</li> </ul>"},{"location":"Guides/GIT/Setup/Local%20Setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Verify permissions on <code>/srv/wiki-working</code> and <code>/var/www/html/wiki</code></li> <li>Make sure <code>post-receive</code> is executable</li> <li>Check logs in <code>/var/log/nginx/</code> if the site won't load</li> </ul>"},{"location":"Guides/GIT/Setup/Local%20Setup/#optional-enhancements","title":"Optional Enhancements","text":"<ul> <li>HTTPS via Let's Encrypt (internal cert authority)</li> <li>Password-protected access via nginx or SSO</li> <li>Git web interface (e.g., Gitea or GitWeb)</li> </ul>"},{"location":"Guides/GIT/Setup/Local%20Setup/#summary","title":"Summary","text":"<p>This guide sets up a version-controlled, internal documentation wiki suitable for CNC shops, manufacturing processes, or engineering references. It's fast, secure, and requires no external cloud services.</p>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/","title":"MkDocs Setup &amp; Deployment \u2014 Full Workflow","text":""},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#1-repo-directory-layout","title":"1. Repo / Directory Layout","text":"<p>Original </p> <pre><code>ShopWIKI/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 ipad-restore.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 .github/\n    \u2514\u2500\u2500 workflows/\n        \u2514\u2500\u2500 deploy.yml\n</code></pre> <p>Issue GitHub Pages 404\u2019d and new pages (like our iPad guide) never appeared.</p> <p>Final Either rename <code>docs/</code> to the repo root or tell MkDocs where your docs live:</p> <pre><code># mkdocs.yml\nsite_name: ShopWIKI\ndocs_dir: '.'        # if you want to store .md files at the repo root\ntheme:\n  name: material\nplugins:\n  - search\n  - awesome-pages\n</code></pre> <p>We kept our files in <code>/docs</code>, so we left the default and did not set <code>docs_dir:</code>.</p>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#2-mkdocsyml-configuration","title":"2. <code>mkdocs.yml</code> Configuration","text":"<pre><code>site_name: ShopWIKI\n\ntheme:\n  name: material\n\nplugins:\n  - search\n  - awesome-pages   # auto-builds the sidebar from your folder structure\n</code></pre> <ul> <li>site_name: shown in the navbar  </li> <li>plugins: include <code>awesome-pages</code> so new files drop into the nav automatically  </li> </ul>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install mkdocs-material mkdocs-awesome-pages-plugin\n</code></pre> <ul> <li><code>mkdocs-material</code>: the Material theme  </li> <li><code>mkdocs-awesome-pages-plugin</code>: auto-generates your sidebar  </li> </ul>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#4-local-preview","title":"4. Local Preview","text":"<pre><code>mkdocs serve\n</code></pre> <ul> <li>Open http://127.0.0.1:8000  </li> <li>Live-reload as you edit  </li> <li>Sidebar updates with every <code>.md</code> in <code>docs/</code> </li> </ul>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#5-github-actions-workflow","title":"5. GitHub Actions Workflow","text":"<p>Create or update <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy MkDocs\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n    permissions:\n      contents: write       # allow pushing to gh-pages\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n\n      - run: pip install mkdocs-material mkdocs-awesome-pages-plugin\n\n      - run: mkdocs gh-deploy --force --verbose\n</code></pre> <ol> <li>Checkout code  </li> <li>Setup Python </li> <li>Install MkDocs + plugins  </li> <li>Deploy to the <code>gh-pages</code> branch  </li> </ol>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#6-troubleshooting-lessons","title":"6. Troubleshooting &amp; Lessons","text":"<ol> <li> <p>404 on Pages </p> </li> <li> <p>Ensure GitHub Pages is set to serve from the <code>gh-pages</code> branch.  </p> </li> <li> <p>\u201cawesome-pages plugin not installed\u201d </p> </li> <li> <p>Add <code>mkdocs-awesome-pages-plugin</code> to your <code>pip install</code> step.  </p> </li> <li> <p>Local vs GitHub mismatch </p> </li> <li> <p>Commit &amp; push every <code>.md</code> you add.  </p> </li> <li> <p>Confirm <code>docs_dir</code> matches where your files live.  </p> </li> <li> <p>Site Title wrong </p> </li> <li> <p>Update <code>site_name</code> in <code>mkdocs.yml</code>.  </p> </li> <li> <p>Adding new pages </p> </li> <li> <p>With awesome-pages, just drop a <code>.md</code> into <code>docs/</code>.  </p> </li> <li> <p>Or manually define in <code>mkdocs.yml</code> under <code>nav:</code> if you need custom order:</p> <p><code>yaml  nav:   - Home: index.md   - iPad Restore: ipad-restore.md   - MkDocs Guide: mkdocs-setup-guide.md</code></p> </li> </ol>"},{"location":"Guides/GIT/Setup/MkDocs%20Setup%20%26%20Deployment%20%E2%80%94%20Full%20Workflow/#7-next-steps","title":"7. Next Steps","text":"<ul> <li>Add front-matter (e.g. <code>title:</code>) to customize page titles.  </li> <li>Explore other plugins: redirects, include-markdown, etc.  </li> <li>When you\u2019re ready, compare with GitBook or other hosted wikis\u2014but this GitHub+MkDocs setup is rock-solid for now.  </li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/","title":"ViewingLocalRepo","text":""},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#viewing-git-repositories-locally-without-github","title":"Viewing Git Repositories Locally Without GitHub","text":"<p>Author: Brian F. Date: 2025-05-30 Purpose: Provide easy, internal-only options for browsing Git repositories with or without a web interface.</p>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#overview","title":"Overview","text":"<p>In a secure or air-gapped CNC environment, it's important to have simple, reliable ways to view Git commit history, diffs, and file changes without relying on GitHub or a full Git server like GitLab.</p> <p>This guide explains several local tools for viewing Git history and comparing file changes. These methods work entirely offline and are suitable for internal documentation, CNC program versioning, and compliance tracking.</p>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#option-1-git-instaweb-one-liner-git-viewer","title":"\ud83d\udd27 Option 1: Git InstaWeb (One-Liner Git Viewer)","text":""},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#description","title":"Description","text":"<p>Starts a temporary local website to browse your Git repo with a GUI, using the <code>git instaweb</code> command.</p>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#setup","title":"Setup","text":"<p>Install Ruby (required by WEBrick):</p> <pre><code>sudo apt install ruby\n</code></pre> <p>Launch the viewer from any Git repo:</p> <pre><code>git instaweb --httpd=webrick\n</code></pre> <p>Then visit:</p> <pre><code>http://localhost:1234\n</code></pre> <p>To shut it down:</p> <pre><code>pkill -f instaweb\n</code></pre>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#pros","title":"Pros","text":"<ul> <li>Built into Git</li> <li>Lightweight</li> <li>No server config needed</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#cons","title":"Cons","text":"<ul> <li>Basic UI</li> <li>Requires Ruby</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#option-2-tig-terminal-git-viewer","title":"\ud83d\udcfa Option 2: <code>tig</code> (Terminal Git Viewer)","text":""},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#description_1","title":"Description","text":"<p><code>tig</code> is a full-screen terminal interface to Git. Great for CLI users.</p>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#installation","title":"Installation","text":"<pre><code>sudo apt install tig\n</code></pre>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#usage","title":"Usage","text":"<pre><code>tig\n</code></pre>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#features","title":"Features","text":"<ul> <li>Browse commits, diffs, and file changes</li> <li>Easily view logs and blame</li> <li>Fully keyboard-driven</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#pros_1","title":"Pros","text":"<ul> <li>Fast, no dependencies</li> <li>Great for quick log reviews</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#cons_1","title":"Cons","text":"<ul> <li>Terminal only, no web UI</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#option-3-gitea-optional-web-interface-for-teams","title":"\ud83c\udf10 Option 3: Gitea (Optional Web Interface for Teams)","text":""},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#description_2","title":"Description","text":"<p>Gitea is a lightweight, self-hosted Git service with a GitHub-style web UI.</p>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#highlights","title":"Highlights","text":"<ul> <li>Host Git repositories internally</li> <li>Web-based editing, diffs, commit history</li> <li>Great for multi-user teams</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#installation-optional-not-required-for-local-only-usage","title":"Installation (optional, not required for local-only usage)","text":"<pre><code># Example Docker-based install\ndocker run -d --name=gitea -p 3000:3000 -v /srv/gitea:/data gitea/gitea:latest\n</code></pre>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#pros_2","title":"Pros","text":"<ul> <li>Fully featured web UI</li> <li>Good for future scaling</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#cons_2","title":"Cons","text":"<ul> <li>Requires setup and server to run continuously</li> </ul>"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#summary-table","title":"\u2705 Summary Table","text":"Tool Interface Setup Pros Use Case Git InstaWeb Web Low One-command viewer Browsing commits quickly tig Terminal Low Fast, rich terminal UI Engineers and techs at the bench Gitea Web High Full GitHub-style platform Teams, CI/CD, remote editing"},{"location":"Guides/GIT/Setup/ViewingLocalRepo/#recommendation","title":"Recommendation","text":"<p>Start with <code>git instaweb</code> or <code>tig</code> for simplicity. If the team needs a full web interface later, consider deploying Gitea internally.</p> <p>All tools listed here are fully offline and compliant with internal use in a secure manufacturing environment.</p>"},{"location":"Guides/GIT/Usage/Why_Git/","title":"Why Git: A Strategic Solution for Aerospace CNC Manufacturing","text":"<p>Author: Brian F. Company: [U.S. Aerospace Company] Date: June 3, 2025 Document Version: 2.0</p>"},{"location":"Guides/GIT/Usage/Why_Git/#executive-summary","title":"Executive Summary","text":"<p>In aerospace CNC manufacturing, where a single programming error can cost hundreds of thousands of dollars and regulatory non-compliance can ground entire fleets, traditional file management systems create unacceptable risks. Git, the world's most trusted version control system, offers aerospace manufacturers a proven solution for managing critical manufacturing documentation with the same rigor applied to mission-critical software systems.</p> <p>This document outlines how Git transforms aerospace CNC operations from reactive file management to proactive change control, directly supporting AS9100D requirements while reducing operational risk and improving manufacturing efficiency.</p>"},{"location":"Guides/GIT/Usage/Why_Git/#the-manufacturing-challenge","title":"The Manufacturing Challenge","text":""},{"location":"Guides/GIT/Usage/Why_Git/#current-state-reality","title":"Current State Reality","text":"<p>Aerospace CNC shops typically manage critical manufacturing assets through: - Shared network drives with ambiguous folder structures - File naming conventions like <code>PART123_FINAL_v3_ACTUAL_FINAL.nc</code> - Email chains for program updates and change notifications - Manual logbooks for tracking program revisions - Tribal knowledge for understanding program history and rationale</p>"},{"location":"Guides/GIT/Usage/Why_Git/#risk-exposure","title":"Risk Exposure","text":"<p>This approach creates significant operational and compliance risks: - Quality Risk: Incorrect program versions leading to scrapped parts or rework - Compliance Risk: Inability to demonstrate traceability during AS9100D audits - Operational Risk: Production delays from confusion over current program versions - Knowledge Risk: Critical manufacturing knowledge lost when personnel leave - Financial Risk: Costs associated with errors, delays, and audit findings</p>"},{"location":"Guides/GIT/Usage/Why_Git/#why-git-is-the-strategic-solution","title":"Why Git is the Strategic Solution","text":"<p>Git addresses these challenges through battle-tested version control principles, originally designed for managing complex software systems where errors have catastrophic consequences\u2014making it naturally suited for aerospace manufacturing environments.</p>"},{"location":"Guides/GIT/Usage/Why_Git/#core-strategic-benefitswew","title":"Core Strategic Benefitswew","text":""},{"location":"Guides/GIT/Usage/Why_Git/#1-immutable-audit-trail-for-regulatory-compliance","title":"1. Immutable Audit Trail for Regulatory Compliance","text":"<ul> <li>Complete Change History: Every modification to CNC programs, setup sheets, and tooling documentation is permanently recorded with timestamp, author, and rationale</li> <li>AS9100D Alignment: Directly supports Clause 7.5.3 (Control of Documented Information) and Clause 8.6 (Release of Products and Services)</li> <li>NADCAP Readiness: Provides the traceability and documentation control required for special process certifications</li> <li>Digital Signatures: Commit signing ensures authenticity and non-repudiation of changes</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#2-elimination-of-version-confusion","title":"2. Elimination of Version Confusion","text":"<ul> <li>Single Source of Truth: Git's distributed architecture ensures everyone works from the same authoritative version</li> <li>Branching Strategy: Separate development work from production-ready programs using proven branching models</li> <li>Automatic Conflict Resolution: Built-in merge capabilities prevent accidental overwrites</li> <li>Release Tagging: Mark specific versions for production use with meaningful labels (e.g., <code>Production_Rev_C</code>, <code>FAI_Approved</code>)</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#3-advanced-change-analysis","title":"3. Advanced Change Analysis","text":"<ul> <li>Line-by-Line Comparisons: Instantly visualize exactly what changed between program versions</li> <li>G-Code Diff Analysis: Identify modifications to critical machining parameters, tool calls, and coordinate systems</li> <li>Setup Sheet Evolution: Track changes to speeds, feeds, fixture requirements, and inspection criteria</li> <li>Root Cause Analysis: Quickly trace quality issues back to specific program changes</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#4-risk-mitigation-through-rollback-capability","title":"4. Risk Mitigation Through Rollback Capability","text":"<ul> <li>Instant Recovery: Revert to any previous version within seconds if issues arise</li> <li>Production Continuity: Minimize downtime by quickly restoring known-good programs</li> <li>Safe Experimentation: Test program improvements without risking production stability</li> <li>Disaster Recovery: Distributed nature of Git ensures manufacturing data survives hardware failures</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#5-concurrent-engineering-support","title":"5. Concurrent Engineering Support","text":"<ul> <li>Parallel Development: Multiple engineers can work on different aspects of a program simultaneously</li> <li>Feature Branches: Isolate experimental work while maintaining production stability</li> <li>Controlled Integration: Merge improvements only after validation and approval</li> <li>Collaboration Enhancement: Team members can contribute expertise without stepping on each other's work</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#aerospace-specific-implementation-strategy","title":"Aerospace-Specific Implementation Strategy","text":""},{"location":"Guides/GIT/Usage/Why_Git/#recommended-repository-structure","title":"Recommended Repository Structure","text":"<pre><code>/manufacturing-programs/\n\u251c\u2500\u2500 /part-families/\n\u2502   \u251c\u2500\u2500 /brackets/\n\u2502   \u251c\u2500\u2500 /housings/\n\u2502   \u2514\u2500\u2500 /fittings/\n\u251c\u2500\u2500 /standard-operations/\n\u2502   \u251c\u2500\u2500 /drilling-cycles/\n\u2502   \u251c\u2500\u2500 /profile-milling/\n\u2502   \u2514\u2500\u2500 /thread-milling/\n\u251c\u2500\u2500 /setup-documentation/\n\u2502   \u251c\u2500\u2500 /work-holding/\n\u2502   \u251c\u2500\u2500 /tooling-lists/\n\u2502   \u2514\u2500\u2500 /inspection-plans/\n\u2514\u2500\u2500 /reference-documents/\n    \u251c\u2500\u2500 /material-specs/\n    \u251c\u2500\u2500 /drawing-archives/\n    \u2514\u2500\u2500 /process-sheets/\n</code></pre>"},{"location":"Guides/GIT/Usage/Why_Git/#security-and-compliance-framework","title":"Security and Compliance Framework","text":""},{"location":"Guides/GIT/Usage/Why_Git/#itardfars-compliance","title":"ITAR/DFARS Compliance","text":"<ul> <li>On-Premises Hosting: Deploy Git servers within controlled facilities</li> <li>Access Control: Role-based permissions aligned with security clearance levels</li> <li>Encryption: Repository encryption at rest and in transit</li> <li>Network Isolation: Air-gapped systems for classified programs</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#change-control-integration","title":"Change Control Integration","text":"<ul> <li>ECO Workflow: Link Git commits to Engineering Change Orders</li> <li>Approval Gates: Require management approval for production branch merges</li> <li>Manufacturing Release: Formal tagging and approval process for production programs</li> <li>Quality Integration: Connect program changes to first article inspection results</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#tooling-and-integration","title":"Tooling and Integration","text":""},{"location":"Guides/GIT/Usage/Why_Git/#shop-floor-interface","title":"Shop Floor Interface","text":"<ul> <li>Read-Only Dashboards: Web-based program viewers for machine operators</li> <li>PDF Generation: Automated conversion of setup sheets for paper-based workflows</li> <li>QR Code Integration: Link physical setup sheets to digital program history</li> <li>Mobile Access: Secure tablet/smartphone access for supervisors and engineers</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#cam-system-integration","title":"CAM System Integration","text":"<ul> <li>Post-Processor Standardization: Consistent G-code formatting for better diff analysis</li> <li>Automated Commits: CAM systems automatically commit programs with metadata</li> <li>Template Management: Version-controlled post-processors and machine configurations</li> <li>Simulation Archives: Store and version machining simulations alongside programs</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"Guides/GIT/Usage/Why_Git/#phase-1-foundation-months-1-2","title":"Phase 1: Foundation (Months 1-2)","text":"<ul> <li>Install and configure Git server infrastructure</li> <li>Establish repository structure and naming conventions</li> <li>Train core engineering team on Git fundamentals</li> <li>Migrate critical programs from existing file systems</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#phase-2-integration-months-3-4","title":"Phase 2: Integration (Months 3-4)","text":"<ul> <li>Implement CAM system integration</li> <li>Deploy shop floor access tools</li> <li>Establish change control workflows</li> <li>Create standard operating procedures</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#phase-3-optimization-months-5-6","title":"Phase 3: Optimization (Months 5-6)","text":"<ul> <li>Deploy advanced features (branching strategies, automated testing)</li> <li>Integrate with quality systems and ECO processes</li> <li>Implement metrics and reporting dashboards</li> <li>Conduct full AS9100D compliance validation</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#phase-4-expansion-months-7","title":"Phase 4: Expansion (Months 7+)","text":"<ul> <li>Extend to additional part families and manufacturing cells</li> <li>Integrate with supply chain and customer systems</li> <li>Implement advanced analytics and predictive capabilities</li> <li>Scale across enterprise manufacturing operations</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#return-on-investment","title":"Return on Investment","text":""},{"location":"Guides/GIT/Usage/Why_Git/#quantifiable-benefits","title":"Quantifiable Benefits","text":"<ul> <li>Reduced Scrap: 15-25% reduction in programming-related scrap through version control</li> <li>Faster Setup: 20-30% reduction in setup time through improved documentation</li> <li>Audit Efficiency: 50-70% reduction in audit preparation time</li> <li>Training Acceleration: 40% faster onboarding of new programmers and operators</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#risk-mitigation-value","title":"Risk Mitigation Value","text":"<ul> <li>Production Continuity: Elimination of multi-day delays from version confusion</li> <li>Compliance Assurance: Proactive audit readiness vs. reactive documentation gathering</li> <li>Knowledge Preservation: Institutional knowledge captured and preserved</li> <li>Quality Consistency: Repeatable processes reduce variability and defects</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#cost-structure","title":"Cost Structure","text":"<ul> <li>Initial Investment: Minimal\u2014Git is open source with low infrastructure requirements</li> <li>Ongoing Costs: Limited to server maintenance and occasional training</li> <li>Scaling Economics: Costs remain flat while benefits multiply with adoption</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#competitive-advantage","title":"Competitive Advantage","text":"<p>Implementing Git positions aerospace manufacturers as technology leaders while competitors struggle with legacy file management systems. This technological advantage translates directly to:</p> <ul> <li>Customer Confidence: Demonstrable process control and quality assurance</li> <li>Operational Excellence: Faster response to engineering changes and customer requirements</li> <li>Talent Attraction: Modern development practices attract top engineering talent</li> <li>Innovation Enablement: Stable foundation for advanced manufacturing technologies</li> </ul>"},{"location":"Guides/GIT/Usage/Why_Git/#conclusion","title":"Conclusion","text":"<p>Git represents more than a file management upgrade\u2014it's a strategic transformation that aligns manufacturing operations with aerospace industry demands for precision, traceability, and continuous improvement. By implementing Git, aerospace CNC shops gain the same change control capabilities that manage billion-dollar software systems, applied directly to their most critical manufacturing assets.</p> <p>The question is not whether to adopt Git, but how quickly your organization can implement this competitive advantage while competitors remain trapped in legacy file management systems.</p>"},{"location":"Guides/GIT/Usage/Why_Git/#next-steps","title":"Next Steps","text":"<ol> <li>Executive Briefing: Present this analysis to leadership for strategic alignment</li> <li>Technical Assessment: Evaluate current infrastructure and integration requirements</li> <li>Pilot Program: Select high-value part family for initial implementation</li> <li>Training Plan: Develop comprehensive Git education program for engineering staff</li> <li>Implementation Timeline: Establish milestones and success metrics</li> </ol> <p>This document serves as a strategic framework for Git adoption in aerospace manufacturing. For detailed implementation guidance, technical specifications, or pilot program development, contact the Manufacturing Engineering team.</p>"},{"location":"Guides/GIT/Usage/git_workflow/","title":"Git workflow","text":""},{"location":"Guides/GIT/Usage/git_workflow/#work-instruction-system-tool-sheets-and-cnc-programs-with-git-version-control","title":"Work Instruction System: Tool Sheets and CNC Programs with Git Version Control","text":"<p>Project Title: Git-Based Tool Sheet and CNC Program Integration Author: Brian F. Company: [U.S. Aerospace Company] Date: 2025-05-30 Compliance: ITAR / DFARS / NIST 800-171 (CUI-Restricted Data)</p>"},{"location":"Guides/GIT/Usage/git_workflow/#objective","title":"Objective","text":"<p>To establish a compliant, version-controlled system that maintains accurate setup documentation, CNC programs, and tooling data through Git. This approach enhances traceability, reduces errors, and supports audit-readiness.</p>"},{"location":"Guides/GIT/Usage/git_workflow/#compliance-requirements","title":"Compliance Requirements","text":"<ul> <li> <p>Prohibit use of public Git repositories (e.g., GitHub.com)</p> </li> <li> <p>Host Git repositories internally (e.g., GitLab, SSH-accessible server)</p> </li> <li> <p>Ensure data remains within U.S. jurisdiction with access restrictions</p> </li> <li> <p>Require commit history traceable to user and timestamp</p> </li> </ul>"},{"location":"Guides/GIT/Usage/git_workflow/#tools-used","title":"Tools Used","text":"Tool Purpose Git Version control for all files Zettlr Markdown editor for setup sheets Internal Git Server Secure on-prem Git access Markdown Portable and human-readable format CNC Machines Mazak (EIA format programs)"},{"location":"Guides/GIT/Usage/git_workflow/#recommended-repository-structure","title":"Recommended Repository Structure","text":"<pre><code>/tool-data/\n\u251c\u2500\u2500 12345-Widget/\n\u2502   \u251c\u2500\u2500 RevA/\n\u2502   \u2502   \u251c\u2500\u2500 setup-sheet.md\n\u2502   \u2502   \u251c\u2500\u2500 op10_mainprogram.eia\n\u2502   \u2502   \u251c\u2500\u2500 tool-list.csv\n\u2502   \u2502   \u2514\u2500\u2500 fixture-photo.jpg\n\u2502   \u251c\u2500\u2500 RevB/\n\u2502   \u2502   \u251c\u2500\u2500 setup-sheet.md\n\u2502   \u2502   \u251c\u2500\u2500 op10_mainprogram.eia\n\u2502   \u2502   \u2514\u2500\u2500 tool-list.csv\n\u2502   \u2514\u2500\u2500 README.md\n</code></pre> <ul> <li> <p>Each revision folder contains a complete set of related files</p> </li> <li> <p>Operators may view or print the latest commit data</p> </li> <li> <p>Engineers can inspect differences using <code>git diff</code> or revert when needed</p> </li> </ul>"},{"location":"Guides/GIT/Usage/git_workflow/#workflow-example","title":"Workflow Example","text":""},{"location":"Guides/GIT/Usage/git_workflow/#checking-the-latest-revision","title":"Checking the Latest Revision","text":"<ol> <li> <p>Navigate to the appropriate part folder (e.g., <code>tool-data/12345-Widget</code>)</p> </li> <li> <p>Use <code>git log</code> or <code>git status</code> to verify you are working on the latest revision folder (e.g., <code>RevB/</code>)</p> </li> <li> <p>Confirm with the lead engineer if any uncertainty exists</p> </li> </ol>"},{"location":"Guides/GIT/Usage/git_workflow/#editing-the-setup-sheet","title":"Editing the Setup Sheet","text":"<ol> <li> <p>Open <code>setup-sheet.md</code> using Zettlr</p> </li> <li> <p>Make the required changes (e.g., clamp offset update, tool usage notes)</p> </li> <li> <p>Save the file</p> </li> </ol>"},{"location":"Guides/GIT/Usage/git_workflow/#editing-the-cnc-program","title":"Editing the CNC Program","text":"<ol> <li> <p>Open the part file in Esprit CAM software</p> </li> <li> <p>Make applicable edits to the machining operations or post-processing parameters</p> </li> <li> <p>Post-process the program and export the updated <code>.eia</code> file</p> </li> <li> <p>Save the updated file into the appropriate revision folder</p> </li> </ol>"},{"location":"Guides/GIT/Usage/git_workflow/#committing-changes-to-git","title":"Committing Changes to Git","text":"<pre><code>cd tool-data/12345-Widget\n\ngit add RevB/\ngit commit -m \"RevB: Updated clamp location and tool #12 feedrate\"\ngit push origin main\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#common-git-commands-and-examples","title":"Common Git Commands and Examples","text":"<p>These commands support traceability and review of documentation and code changes:</p>"},{"location":"Guides/GIT/Usage/git_workflow/#view-commit-history","title":"View commit history","text":"<pre><code>git log --oneline --graph\n</code></pre> <p>Example Output:</p> <pre><code>* a8cd9f2 RevB: Updated clamp location and tool #12 feedrate\n* 4fa23d1 RevA: Initial release of part 12345-Widget\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#view-file-level-edit-history","title":"View file-level edit history","text":"<pre><code>git log -- setup-sheet.md\n</code></pre> <p>Example Output:</p> <pre><code>commit a8cd9f2a1b24c0fa5e9f4d1a28c7f92b3b7d2923\nAuthor: Brian F. &lt;brian@example.com&gt;\nDate:   Mon May 27 14:21:36 2025 -0500\n\n    RevB: Updated clamp location and tool #12 feedrate\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#compare-two-revisions","title":"Compare two revisions","text":"<pre><code>git diff RevA RevB\n</code></pre> <p>Example Output:</p> <pre><code>--- a/RevA/setup-sheet.md\n+++ b/RevB/setup-sheet.md\n@@ -12,7 +12,7 @@\n- Clamp offset set to 1.00 in from edge\n+ Clamp offset updated to 1.25 in from edge per operator feedback\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#view-line-by-line-author-info","title":"View line-by-line author info","text":"<pre><code>git blame setup-sheet.md\n</code></pre> <p>Example Output:</p> <pre><code>a8cd9f2 (Brian F. 2025-05-27 14:21:36 -0500) Clamp offset updated to 1.25 in from edge per operator feedback\n4fa23d1 (Brian F. 2025-05-25 09:12:02 -0500) Tool #12 RPM set to 3200\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#check-current-branch-and-file-status","title":"Check current branch and file status","text":"<pre><code>git status\n</code></pre> <p>Example Output:</p> <pre><code>On branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   RevB/setup-sheet.md\n</code></pre>"},{"location":"Guides/GIT/Usage/git_workflow/#benefits","title":"Benefits","text":"<ul> <li> <p>Unified source of truth for each setup revision</p> </li> <li> <p>Full visibility and traceability of all changes</p> </li> <li> <p>Consistency across shifts and machines</p> </li> <li> <p>Conforms to ITAR and NIST 800-171 standards</p> </li> <li> <p>Ready for downstream automation, export, or dashboard integration</p> </li> </ul>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/","title":"Digital Whiteboard Integration Proposal","text":""},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#1-introduction","title":"1. Introduction","text":""},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#1-introduction_1","title":"1. Introduction","text":"<p>Title: Modernizing Our Whiteboard Workflow Subtitle: From Marker Smudges to Searchable Notes  \ud83d\udcdd Prepared by [Your Name], [Date]</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#2-observing-the-irony","title":"2. Observing the Irony","text":""},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#a-whiteboard-in-front-of-a-whiteboard","title":"A Whiteboard in Front of a Whiteboard","text":"<p>It\u2019s ironic \u2014 and telling \u2014 that a fully capable digital display is mounted directly behind a traditional dry-erase whiteboard. This configuration serves as an unintentional metaphor:</p> <ul> <li>Outdated tools are covering more effective ones</li> <li>We\u2019re doing extra work to avoid using simpler solutions</li> <li>The tools for improvement are literally within arm\u2019s reach</li> </ul> <p></p> <p>This setup is a reminder that meaningful change often comes not from new tools, but from better use of what we already have.</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#3-the-case-for-going-digital","title":"3. The Case for Going Digital","text":"<ul> <li>Handwritten notes are prone to erasure or misinterpretation</li> <li>Notes on the board are not easily shared between shifts</li> <li>Dry-erase boards provide no version history or traceability</li> <li>Digital notes can be saved, searched, and shared instantly</li> </ul> <p>a modern whiteboard</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#4-leveraging-existing-infrastructure","title":"4. Leveraging Existing Infrastructure","text":"<ul> <li>A digital board is already mounted and ready to use</li> <li>No additional hardware or budget is required</li> <li>We can begin using it today with minimal setup</li> </ul> <p>\ud83d\udcf7 Image of the digital display, labeled for clarity \ud83d\udcf7 Side-by-side comparison photo or diagram</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#5-recommended-applications","title":"5. Recommended Applications","text":"<p>Use lightweight and accessible tools:</p> <ul> <li>Microsoft Whiteboard \u2013 Seamless integration with Teams and 365</li> <li>Excalidraw \u2013 Fast and open-source with local file support</li> <li>Jamboard (or OpenBoard alternatives)</li> </ul> <p>Common features include:</p> <ul> <li>Finger/stylus input</li> <li>Save/export options (PNG, PDF)</li> <li>Reusability and cloud storage</li> </ul> <p>\ud83d\udcf7 Screenshots of each app interface in use</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#6-proposed-workflow-general-requests-only","title":"6. Proposed Workflow (General Requests Only)","text":"<ol> <li>Start of shift: Launch whiteboard app</li> <li>Add general notes (maintenance, reminders, tools, etc.)</li> <li>End of shift: Save/export as image or PDF</li> <li>Upload to shared Teams folder or link in Power Apps passdown form</li> </ol> <p>\ud83d\udcf7 Mock digital whiteboard with sketch examples \ud83d\udcf7 Export/save interface screenshot</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#7-example-use-cases-general-not-job-specific","title":"7. Example Use Cases (General, Not Job-Specific)","text":"<p>\u26a0\ufe0f Note: This board is for shift-level communication, not part- or program-specific issues.</p> <ul> <li> <p>\"General cleanup needed around Machine 3\"   \u27a1\ufe0f Operator draws cluttered area   \u2705 Cleanup handled next shift</p> </li> <li> <p>\"Need new batteries for edge finder\"   \u27a1\ufe0f Arrow added to tool area   \u2705 Tool crib notified in advance</p> </li> <li> <p>\"Check torque wrench calibration next week\"   \u27a1\ufe0f Diagram with reminder date   \u2705 Lead confirms it's scheduled</p> </li> </ul> <p>\ud83d\udcf7 Screenshots of sketches matching these use cases</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#8-benefits-of-the-digital-whiteboard","title":"8. Benefits of the Digital Whiteboard","text":"<ul> <li>Maintains historical record of requests</li> <li>Prevents loss of critical notes</li> <li>Increases clarity for incoming shifts</li> <li>Eases audits and supports training</li> </ul> <p>\ud83d\udcf7 Example folder showing stored whiteboard exports</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#9-pilot-program-proposal","title":"9. Pilot Program Proposal","text":"<ul> <li>Trial use of the digital board for one week</li> <li>Keep physical board for comparison</li> <li>Evaluate ease of use, clarity, and adoption</li> </ul> <p>\ud83d\udcf7 Before/after visual comparison of both systems \ud83d\udcdd Provide sign-up form for pilot participants</p>"},{"location":"Guides/General/Whiteboard%20behind%20a%20whiteboard/#10-conclusion","title":"10. Conclusion","text":"<p>This isn\u2019t about replacing our whiteboard \u2014 it\u2019s about unlocking the one behind it.</p>"},{"location":"Guides/General/Whiteboard%20vs%20Digital/","title":"\ud83d\udee0\ufe0f Why We Should Evolve Beyond the Whiteboard","text":"<p>Currently, we log all change requests on a physical whiteboard and review them during our daily standup meetings. While this method provides immediate visibility and encourages live discussion, it has significant limitations in terms of traceability, accountability, and long-term value.</p>"},{"location":"Guides/General/Whiteboard%20vs%20Digital/#benefits-of-the-whiteboard-system","title":"\u2705 Benefits of the Whiteboard System","text":"<ul> <li>Easy to understand and use \u2014 no learning curve  </li> <li>Promotes daily conversations and team alignment  </li> <li>Always visible when you're physically present  </li> </ul>"},{"location":"Guides/General/Whiteboard%20vs%20Digital/#limitations-of-the-whiteboard-approach","title":"\u26a0\ufe0f Limitations of the Whiteboard Approach","text":"<ul> <li>No long-term record \u2014 once something is erased, it\u2019s gone forever  </li> <li>Not searchable or reportable \u2014 hard to track patterns or recurring issues  </li> <li>No accountability \u2014 no assignments, due dates, or status indicators  </li> <li>Limited access \u2014 only visible in person, not ideal for multi-shift teams  </li> <li>No integration \u2014 can\u2019t link to tooling, program changes, or digital logs  </li> </ul>"},{"location":"Guides/General/Whiteboard%20vs%20Digital/#a-better-approach-digital-change-tracking","title":"\ud83d\udca1 A Better Approach: Digital Change Tracking","text":"<p>We should consider using a lightweight issue tracking system to log and manage change requests in a more structured way. This would allow us to:</p> <ul> <li>Keep a searchable, permanent history of all change requests  </li> <li>Assign changes to specific team members or shifts  </li> <li>Track status (open, in progress, complete) and priority  </li> <li>Add labels for machine, part number, shift, or reason for change  </li> <li>Review trends and recurring problems over time  </li> <li>Integrate with tools we already use (Teams, Git, SharePoint, etc.)  </li> </ul>"},{"location":"Guides/General/Whiteboard%20vs%20Digital/#suggested-tools-easy-to-implement","title":"\ud83d\udd27 Suggested Tools (Easy to Implement)","text":"Tool Highlights Trello Visual board, drag-and-drop tasks, easy to use, great for team overviews Microsoft Lists Integrated with Teams &amp; SharePoint, customizable, structured data tracking GitHub Issues Ideal if we already use Git; ties changes directly to program revisions Notion Combines documentation and task tracking in a flexible, modern interface"},{"location":"Guides/General/Whiteboard%20vs%20Digital/#the-hybrid-approach","title":"\ud83e\udded The Hybrid Approach","text":"<p>We don\u2019t have to stop using the whiteboard right away. Instead, we can use it to highlight the top priorities of the day while maintaining a digital log for:</p> <ul> <li>Historical tracking  </li> <li>Follow-up  </li> <li>Documentation  </li> <li>Cross-shift communication  </li> </ul> <p>Conclusion By adding a simple issue tracker alongside our standup board, we\u2019ll reduce dropped tasks, improve accountability, and gain valuable data to improve our processes long-term \u2014 without disrupting the team\u2019s existing rhythm.</p>"},{"location":"Guides/General/image-dropper/","title":"\ud83d\uddbc\ufe0f Drag-and-Drop Image \u2192 Markdown Inserter","text":"<p>This tool lets you drag an image onto a local web page, and it will:</p> <ol> <li>Save the image into <code>docs/images/</code></li> <li>Generate the correct Markdown for linking the image</li> <li>Automatically copy the Markdown to your clipboard \u2705</li> </ol>"},{"location":"Guides/General/image-dropper/#setup","title":"\ud83d\udd27 Setup","text":""},{"location":"Guides/General/image-dropper/#1-project-structure","title":"1. \ud83d\udcc1 Project Structure","text":"<p>Create a folder anywhere (e.g., <code>~/image-dropper/</code>) and inside it, put these files:</p>"},{"location":"Guides/General/image-dropper/#indexhtml","title":"<code>index.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;title&gt;Image Drop to Markdown&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Drop image to generate Markdown&lt;/h1&gt;\n  &lt;div id=\"dropzone\"&gt;Drop image here&lt;/div&gt;\n  &lt;pre id=\"output\"&gt;&lt;/pre&gt;\n\n  &lt;script&gt;\n    const dropzone = document.getElementById('dropzone');\n    const output = document.getElementById('output');\n\n    dropzone.addEventListener('dragover', e =&gt; {\n      e.preventDefault();\n      dropzone.classList.add('hover');\n    });\n\n    dropzone.addEventListener('dragleave', () =&gt; {\n      dropzone.classList.remove('hover');\n    });\n\n    dropzone.addEventListener('drop', async e =&gt; {\n      e.preventDefault();\n      dropzone.classList.remove('hover');\n\n      const file = e.dataTransfer.files[0];\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const res = await fetch('/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const result = await res.json();\n      const markdown = `![${result.name}](../../images/${result.name})`;\n      output.textContent = markdown;\n\n      navigator.clipboard.writeText(markdown)\n        .then(() =&gt; alert(\"Copied to clipboard!\"))\n        .catch(() =&gt; alert(\"Markdown ready, but couldn't copy to clipboard.\"));\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Guides/General/image-dropper/#stylecss","title":"<code>style.css</code>","text":"<pre><code>body {\n  font-family: sans-serif;\n  background: #1e1e1e;\n  color: #eee;\n  padding: 2rem;\n  text-align: center;\n}\n\n#dropzone {\n  border: 2px dashed #666;\n  padding: 4rem;\n  margin: 2rem auto;\n  width: 80%;\n  max-width: 600px;\n  transition: 0.3s;\n}\n\n#dropzone.hover {\n  border-color: #00ccff;\n  background-color: #333;\n}\n\npre {\n  margin-top: 2rem;\n  font-size: 1.2rem;\n  background: #333;\n  padding: 1rem;\n  border-radius: 5px;\n  overflow-x: auto;\n}\n</code></pre>"},{"location":"Guides/General/image-dropper/#serverpy","title":"<code>server.py</code>","text":"<pre><code>from flask import Flask, request, jsonify\nimport os\nfrom werkzeug.utils import secure_filename\n\napp = Flask(__name__)\nUPLOAD_FOLDER = os.path.join(os.getcwd(), \"docs/images\")\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    file = request.files['file']\n    filename = secure_filename(file.filename)\n    save_path = os.path.join(UPLOAD_FOLDER, filename)\n    file.save(save_path)\n    return jsonify({\"name\": filename})\n\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n\n@app.route('/style.css')\ndef css():\n    return app.send_static_file('style.css')\n\nif __name__ == '__main__':\n    app.static_folder = '.'\n    app.run(debug=True)\n</code></pre>"},{"location":"Guides/General/image-dropper/#how-to-use","title":"\u25b6\ufe0f How to Use","text":"<ol> <li> <p>Make sure you have Flask installed:</p> <p><code>bash pip install flask</code></p> </li> <li> <p>Run the server:</p> <p><code>bash python server.py</code></p> </li> <li> <p>Open your browser to http://127.0.0.1:5000</p> </li> <li> <p>Drop an image into the box</p> </li> <li> <p>It saves the image to <code>docs/images/</code> and copies the Markdown to your clipboard:</p> <p><code>markdown ![example.png](../../images/example.png)</code></p> </li> </ol>"},{"location":"Guides/General/image-dropper/#tips","title":"\u2705 Tips","text":"<ul> <li>Works great for MkDocs setups where you're editing files in deep folders</li> <li>No more typing <code>../../images/foo.png</code> manually!</li> <li>You can extend this to rename files, resize them, or even upload to S3 if you want</li> </ul> <p>\ud83d\udc77\u200d\u2642\ufe0f Built for local use \u2014 no external services or internet connection required.</p>"},{"location":"Guides/General/ipad-restore/","title":"iPad Restore on Linux \u2014 What Went Wrong and How We Fixed It","text":"<p>Overview \u00b7 Where We Went Wrong \u00b7 DFU vs Recovery Mode \u00b7 New Build Workflow \u00b7 Key Takeaways \u00b7 Resources</p>"},{"location":"Guides/General/ipad-restore/#overview","title":"Overview","text":"<p>We wanted to wipe and reinstall iPadOS on an older iPad using only Linux. Sounds simple, but we ran into a string of very familiar pain-points: flaky cables, half-broken packages, USB-port weirdness, and confusion about DFU versus Recovery mode. This document captures those dead-ends and, more importantly, the repeatable fix using the latest open-source stack.</p>"},{"location":"Guides/General/ipad-restore/#where-we-went-wrong","title":"Where We Went Wrong","text":"<p>Cable Chaos: Our first micro-USB \u2192 Lightning cord was a charge-only knock-off. It would power the iPad but never enumerate as a USB device, so <code>lsusb</code> stayed silent and all restore tools failed.</p> <ul> <li>USB 3.0 Quirks: DFU negotiates only 480 Mb/s. Plugging into a blue USB 3.x port caused intermittent disconnects on our kernel.</li> </ul>"},{"location":"Guides/General/ipad-restore/#dfu-vs-recovery-mode","title":"DFU vs Recovery Mode","text":"<p>DFU (Device Firmware Update) is the only mode that lets you completely reflash the firmware, whereas Recovery Mode simply reinstalls the OS without touching the bootloader. If you\u2019re seeing the little cable-to-computer icon on the iPad screen, that\u2019s Recovery Mode\u2014not DFU\u2014so tools like <code>libimobiledevice</code> won\u2019t work until you force it into DFU (hold Power+Home for exactly 10 s, then release Power only).</p> <p>![[sainsmart-specialty-power-tools-101-60-xl4030v2-a-64_600.avif]]</p>"},{"location":"Guides/General/optimize_images/","title":"\ud83d\uddbc\ufe0f Drag-and-Drop Image \u2192 Markdown Inserter","text":"<p>This tool lets you drag an image onto a local web page, and it will:</p> <ol> <li>Save the image into <code>docs/images/</code></li> <li>Generate the correct Markdown for linking the image</li> <li>Automatically copy the Markdown to your clipboard \u2705</li> </ol>"},{"location":"Guides/General/optimize_images/#setup","title":"\ud83d\udd27 Setup","text":""},{"location":"Guides/General/optimize_images/#1-project-structure","title":"1. \ud83d\udcc1 Project Structure","text":"<p>Create a folder anywhere (e.g., <code>~/image-dropper/</code>) and inside it, put these files:</p>"},{"location":"Guides/General/optimize_images/#indexhtmlddf","title":"<code>index.html</code>ddf","text":"<p>```html</p> Image Drop to Markdown Drop image to generate Markdown Drop image here"},{"location":"Guides/MTCONNECT/mtconnect_logger/","title":"!/usr/bin/env python3  asdasd","text":"<p>\"\"\" MTConnect Data Logger - MySQL Storage Collects MTConnect data via HTTP requests and stores in MySQL database \"\"\"</p> <p>import requestsasdasd import mysql.connector from mysql.connector import Error import xml.etree.ElementTree as ET from datetime import datetime import time import logging import sys from typing import Dict, List, Optional import configparser</p>"},{"location":"Guides/MTCONNECT/mtconnect_logger/#configure-logging","title":"Configure logging","text":"<p>logging.basicConfig(     level=logging.INFO,     format='%(asctime)s - %(levelname)s - %(message)s',     handlers=[         logging.FileHandler('mtconnect_logger.log'),         logging.StreamHandler(sys.stdout)     ] ) logger = logging.getLogger(name)</p> <p>class MTConnectMySQLLogger:     def init(self, config_file: str = 'config.ini'):         \"\"\"Initialize the MTConnect logger with configuration\"\"\"         self.config = self.load_config(config_file)         self.connection = None         self.last_sequence = None</p> <pre><code>def load_config(self, config_file: str) -&gt; configparser.ConfigParser:\n    \"\"\"Load configuration from file\"\"\"\n    config = configparser.ConfigParser()\n\n    # Default configuration\n    config['MTCONNECT'] = {\n        'agent_url': 'http://localhost:5000',\n        'device_name': '',\n        'poll_interval': '5'\n    }\n\n    config['DATABASE'] = {\n        'host': 'localhost',\n        'port': '3306',\n        'database': 'mtconnect_data',\n        'user': 'mtconnect_user',\n        'password': 'your_password'\n    }\n\n    # Try to read existing config file\n    try:\n        config.read(config_file)\n        logger.info(f\"Configuration loaded from {config_file}\")\n    except Exception as e:\n        logger.warning(f\"Could not read config file {config_file}, using defaults: {e}\")\n\n    return config\n\ndef connect_database(self) -&gt; bool:\n    \"\"\"Establish MySQL database connection\"\"\"\n    try:\n        self.connection = mysql.connector.connect(\n            host=self.config['DATABASE']['host'],\n            port=int(self.config['DATABASE']['port']),\n            database=self.config['DATABASE']['database'],\n            user=self.config['DATABASE']['user'],\n            password=self.config['DATABASE']['password'],\n            autocommit=True\n        )\n\n        if self.connection.is_connected():\n            logger.info(\"Successfully connected to MySQL database\")\n            return True\n\n    except Error as e:\n        logger.error(f\"Error connecting to MySQL: {e}\")\n        return False\n\ndef create_tables(self):\n    \"\"\"Create necessary tables if they don't exist\"\"\"\n    cursor = self.connection.cursor()\n\n    # Create data_items table\n    create_data_items_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS data_items (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        timestamp DATETIME(6) NOT NULL,\n        device_name VARCHAR(255) NOT NULL,\n        data_item_id VARCHAR(255) NOT NULL,\n        data_item_name VARCHAR(255),\n        data_item_type VARCHAR(100),\n        category VARCHAR(50),\n        value TEXT,\n        sequence_number BIGINT,\n        INDEX idx_timestamp (timestamp),\n        INDEX idx_device_data_item (device_name, data_item_id),\n        INDEX idx_sequence (sequence_number)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \"\"\"\n\n    # Create events table for discrete events\n    create_events_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS events (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        timestamp DATETIME(6) NOT NULL,\n        device_name VARCHAR(255) NOT NULL,\n        data_item_id VARCHAR(255) NOT NULL,\n        data_item_name VARCHAR(255),\n        event_type VARCHAR(100),\n        value TEXT,\n        sequence_number BIGINT,\n        INDEX idx_timestamp (timestamp),\n        INDEX idx_device_event (device_name, data_item_id)\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \"\"\"\n\n    try:\n        cursor.execute(create_data_items_table)\n        cursor.execute(create_events_table)\n        logger.info(\"Database tables created/verified successfully\")\n    except Error as e:\n        logger.error(f\"Error creating tables: {e}\")\n    finally:\n        cursor.close()\n\ndef get_mtconnect_data(self, endpoint: str = 'current') -&gt; Optional[ET.Element]:\n    \"\"\"Fetch MTConnect data from agent\"\"\"\n    agent_url = self.config['MTCONNECT']['agent_url']\n    device_name = self.config['MTCONNECT']['device_name']\n\n    # Build URL\n    if device_name:\n        url = f\"{agent_url}/{device_name}/{endpoint}\"\n    else:\n        url = f\"{agent_url}/{endpoint}\"\n\n    # Add sequence parameter for streaming\n    if endpoint == 'sample' and self.last_sequence:\n        url += f\"?from={self.last_sequence + 1}\"\n\n    try:\n        logger.debug(f\"Requesting: {url}\")\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        # Parse XML\n        root = ET.fromstring(response.content)\n        return root\n\n    except requests.exceptions.RequestException as e:\n        logger.error(f\"HTTP request failed: {e}\")\n        return None\n    except ET.ParseError as e:\n        logger.error(f\"XML parsing failed: {e}\")\n        return None\n\ndef parse_and_store_data(self, xml_data: ET.Element):\n    \"\"\"Parse MTConnect XML and store in database\"\"\"\n    if xml_data is None:\n        return\n\n    # Define namespaces\n    namespaces = {\n        'm': 'urn:mtconnect.org:MTConnectStreams:1.3',\n        'mt': 'urn:mtconnect.org:MTConnectDevices:1.3'\n    }\n\n    cursor = self.connection.cursor()\n\n    try:\n        # Find all DeviceStream elements\n        device_streams = xml_data.findall('.//m:DeviceStream', namespaces)\n\n        for device_stream in device_streams:\n            device_name = device_stream.get('name', 'Unknown')\n\n            # Process ComponentStreams\n            component_streams = device_stream.findall('.//m:ComponentStream', namespaces)\n\n            for component_stream in component_streams:\n                component_name = component_stream.get('name', '')\n\n                # Process all data items (Samples, Events, Condition)\n                for category in ['Samples', 'Events', 'Condition']:\n                    category_element = component_stream.find(f'm:{category}', namespaces)\n                    if category_element is not None:\n                        self.process_category_data(cursor, category_element, device_name, component_name, category.lower())\n\n        self.connection.commit()\n        logger.debug(\"Data stored successfully\")\n\n    except Error as e:\n        logger.error(f\"Database error: {e}\")\n        self.connection.rollback()\n    finally:\n        cursor.close()\n\ndef process_category_data(self, cursor, category_element: ET.Element, device_name: str, component_name: str, category: str):\n    \"\"\"Process data items within a category (samples, events, condition)\"\"\"\n\n    for data_item in category_element:\n        # Extract data item attributes\n        data_item_id = data_item.get('dataItemId', '')\n        timestamp_str = data_item.get('timestamp', '')\n        sequence = data_item.get('sequence', 0)\n        name = data_item.get('name', data_item.tag.split('}')[-1])  # Remove namespace\n\n        # Convert timestamp\n        try:\n            if timestamp_str:\n                # MTConnect timestamp format: 2023-12-01T10:30:45.123Z\n                timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))\n            else:\n                timestamp = datetime.now()\n        except ValueError:\n            timestamp = datetime.now()\n            logger.warning(f\"Invalid timestamp format: {timestamp_str}\")\n\n        # Get value\n        value = data_item.text if data_item.text else ''\n\n        # Update last sequence number\n        try:\n            seq_num = int(sequence)\n            if self.last_sequence is None or seq_num &gt; self.last_sequence:\n                self.last_sequence = seq_num\n        except (ValueError, TypeError):\n            pass\n\n        # Insert into appropriate table\n        if category in ['samples', 'condition']:\n            insert_query = \"\"\"\n            INSERT INTO data_items (timestamp, device_name, data_item_id, data_item_name, \n                                  data_item_type, category, value, sequence_number)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n            \"\"\"\n            cursor.execute(insert_query, (\n                timestamp, device_name, data_item_id, name, \n                data_item.tag.split('}')[-1], category, value, sequence\n            ))\n        else:  # events\n            insert_query = \"\"\"\n            INSERT INTO events (timestamp, device_name, data_item_id, data_item_name, \n                              event_type, value, sequence_number)\n            VALUES (%s, %s, %s, %s, %s, %s, %s)\n            \"\"\"\n            cursor.execute(insert_query, (\n                timestamp, device_name, data_item_id, name, \n                data_item.tag.split('}')[-1], value, sequence\n            ))\n\ndef run_continuous_logging(self):\n    \"\"\"Run continuous data logging\"\"\"\n    if not self.connect_database():\n        logger.error(\"Failed to connect to database. Exiting.\")\n        return\n\n    self.create_tables()\n\n    poll_interval = int(self.config['MTCONNECT']['poll_interval'])\n    logger.info(f\"Starting continuous logging (poll interval: {poll_interval}s)\")\n\n    # Get initial current state\n    logger.info(\"Getting initial current state...\")\n    current_data = self.get_mtconnect_data('current')\n    if current_data is not None:\n        self.parse_and_store_data(current_data)\n\n    # Start continuous sampling\n    while True:\n        try:\n            logger.debug(\"Fetching sample data...\")\n            sample_data = self.get_mtconnect_data('sample')\n            if sample_data is not None:\n                self.parse_and_store_data(sample_data)\n\n            time.sleep(poll_interval)\n\n        except KeyboardInterrupt:\n            logger.info(\"Received interrupt signal. Shutting down...\")\n            break\n        except Exception as e:\n            logger.error(f\"Unexpected error in main loop: {e}\")\n            time.sleep(poll_interval)\n\n    # Cleanup\n    if self.connection and self.connection.is_connected():\n        self.connection.close()\n        logger.info(\"Database connection closed\")\n</code></pre> <p>def create_sample_config():     \"\"\"Create a sample configuration file\"\"\"     config = configparser.ConfigParser()</p> <pre><code>config['MTCONNECT'] = {\n    'agent_url': 'http://localhost:5000',\n    'device_name': 'VMC-3Axis',\n    'poll_interval': '5'\n}\n\nconfig['DATABASE'] = {\n    'host': 'localhost',\n    'port': '3306', \n    'database': 'mtconnect_data',\n    'user': 'mtconnect_user',\n    'password': 'your_password_here'\n}\n\nwith open('config.ini', 'w') as configfile:\n    config.write(configfile)\n\nprint(\"Sample config.ini created. Please edit with your settings.\")\n</code></pre> <p>if name == \"main\":     import argparse</p> <pre><code>parser = argparse.ArgumentParser(description='MTConnect MySQL Data Logger')\nparser.add_argument('--create-config', action='store_true', \n                   help='Create sample configuration file')\nparser.add_argument('--config', default='config.ini',\n                   help='Configuration file path (default: config.ini)')\n\nargs = parser.parse_args()\n\nif args.create_config:\n    create_sample_config()\nelse:\n    logger = MTConnectMySQLLogger(args.config)\n    logger.run_continuous_logging()\n</code></pre>"},{"location":"Work_Instructions/261/1656952-1/","title":"\ud83d\udcd8 Work Instructions","text":""},{"location":"Work_Instructions/261/1656952-1/#part-number-1656952-1","title":"Part Number: 1656952-1","text":"<p>This is a conceptual instruction sheet for internal demonstration purposes.</p>"},{"location":"Work_Instructions/261/1656952-1/#overview","title":"\u2705 Overview","text":"<p>This document outlines the step-by-step instructions for processing the part number 1656952-1. All processes must follow standard operating procedures (SOPs), and any deviation must be approved by the Manufacturing Engineer.</p>"},{"location":"Work_Instructions/261/1656952-1/#part-reference-image","title":"\ud83e\udde9 Part Reference Image","text":""},{"location":"Work_Instructions/261/1656952-1/#required-tools-materials","title":"\ud83d\udee0 Required Tools &amp; Materials","text":"Tool ID Description Group No. Notes T-101 1/2\" Carbide End Mill 5 Use coated tool only T-202 3/8\" Spot Drill 12 90\u00b0 included angle T-303 Hydraulic Vise Fixture \u2014 Verify clamp force <p>\ud83d\udd27 Ensure all tools are in calibration. Use tool preset sheets from ToolCrib-Station 3.</p>"},{"location":"Work_Instructions/261/1656952-1/#setup-instructions","title":"\ud83d\udccf Setup Instructions","text":"<ol> <li>Load Part </li> <li>Use hydraulic fixture T-303  </li> <li> <p>Confirm datum A-B-C aligns per print</p> </li> <li> <p>Zero Machine </p> </li> <li>Set Z0 to top of finished surface  </li> <li> <p>Use tool length offset per machine sheet</p> </li> <li> <p>Run Operation 10 (Rough Mill) </p> </li> <li>Use T-101  </li> <li>Feed: 18 IPM, Speed: 4200 RPM  </li> <li> <p>Coolant: ON (flood)</p> </li> <li> <p>Spot Drill Holes </p> </li> <li>Use T-202  </li> <li>Depth: 0.050\"  </li> <li>Ensure spot diameter \u2265 0.375\"</li> </ol>"},{"location":"Work_Instructions/261/1656952-1/#inspection-requirements","title":"\ud83d\udd0d Inspection Requirements","text":"Feature Method Tolerance Gage Used Overall Height Caliper (digital) 2.000\" \u00b1 .005\" Mitutoyo 0\u20136\" Hole \u00d8 Pin Gage \u00d80.375\" \u00b1 .001\" Class ZZ Edge Radius Visual + Template R0.125 \u00b1 .015 Radius Template R Set <p>\ud83e\uddea Use first-piece inspection form QF-22 after initial part run.</p>"},{"location":"Work_Instructions/261/1656952-1/#safety-notes","title":"\u26a0 Safety &amp; Notes","text":"<ul> <li>Always wear ANSI Z87.1 approved safety glasses.</li> <li>Remove chips between steps.</li> <li>Do not leave the machine unattended during the first article run.</li> <li>Report any discrepancies or tool wear to the Shift Lead.</li> </ul>"},{"location":"Work_Instructions/261/1656952-1/#final-sign-off","title":"\u2705 Final Sign-Off","text":"Inspector Date Notes _______ ____ _________ <p>Document prepared by Brian Fosbinder \u2013 May 2025</p>"}]}